// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pokerchain/poker/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "pokerchain.poker.v1";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgCreateGame defines the MsgCreateGame message. */
export interface MsgCreateGame {
  creator: string;
  minBuyIn: number;
  maxBuyIn: number;
  minPlayers: number;
  maxPlayers: number;
  smallBlind: number;
  bigBlind: number;
  timeout: number;
  gameType: string;
}

/** MsgCreateGameResponse defines the MsgCreateGameResponse message. */
export interface MsgCreateGameResponse {
}

/** MsgJoinGame defines the MsgJoinGame message. */
export interface MsgJoinGame {
  creator: string;
  gameId: string;
  seat: number;
  buyIn: number;
}

/** MsgJoinGameResponse defines the MsgJoinGameResponse message. */
export interface MsgJoinGameResponse {
}

/** MsgLeaveGame defines the MsgLeaveGame message. */
export interface MsgLeaveGame {
  creator: string;
  gameId: string;
}

/** MsgLeaveGameResponse defines the MsgLeaveGameResponse message. */
export interface MsgLeaveGameResponse {
}

/** MsgDealCards defines the MsgDealCards message. */
export interface MsgDealCards {
  creator: string;
  gameId: string;
}

/** MsgDealCardsResponse defines the MsgDealCardsResponse message. */
export interface MsgDealCardsResponse {
}

/** MsgPerformAction defines the MsgPerformAction message. */
export interface MsgPerformAction {
  creator: string;
  gameId: string;
  action: string;
  amount: number;
}

/** MsgPerformActionResponse defines the MsgPerformActionResponse message. */
export interface MsgPerformActionResponse {
}

/** MsgMint defines the MsgMint message. */
export interface MsgMint {
  creator: string;
  recipient: string;
  amount: number;
  ethTxHash: string;
  nonce: number;
}

/** MsgMintResponse defines the MsgMintResponse message. */
export interface MsgMintResponse {
}

/** MsgBurn defines the MsgBurn message. */
export interface MsgBurn {
  creator: string;
  amount: number;
  ethRecipient: string;
}

/** MsgBurnResponse defines the MsgBurnResponse message. */
export interface MsgBurnResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateGame(): MsgCreateGame {
  return {
    creator: "",
    minBuyIn: 0,
    maxBuyIn: 0,
    minPlayers: 0,
    maxPlayers: 0,
    smallBlind: 0,
    bigBlind: 0,
    timeout: 0,
    gameType: "",
  };
}

export const MsgCreateGame: MessageFns<MsgCreateGame> = {
  encode(message: MsgCreateGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.minBuyIn !== 0) {
      writer.uint32(16).uint64(message.minBuyIn);
    }
    if (message.maxBuyIn !== 0) {
      writer.uint32(24).uint64(message.maxBuyIn);
    }
    if (message.minPlayers !== 0) {
      writer.uint32(32).int64(message.minPlayers);
    }
    if (message.maxPlayers !== 0) {
      writer.uint32(40).int64(message.maxPlayers);
    }
    if (message.smallBlind !== 0) {
      writer.uint32(48).uint64(message.smallBlind);
    }
    if (message.bigBlind !== 0) {
      writer.uint32(56).uint64(message.bigBlind);
    }
    if (message.timeout !== 0) {
      writer.uint32(64).int64(message.timeout);
    }
    if (message.gameType !== "") {
      writer.uint32(74).string(message.gameType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.minBuyIn = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxBuyIn = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minPlayers = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxPlayers = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.smallBlind = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bigBlind = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.timeout = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.gameType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateGame {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      minBuyIn: isSet(object.minBuyIn) ? globalThis.Number(object.minBuyIn) : 0,
      maxBuyIn: isSet(object.maxBuyIn) ? globalThis.Number(object.maxBuyIn) : 0,
      minPlayers: isSet(object.minPlayers) ? globalThis.Number(object.minPlayers) : 0,
      maxPlayers: isSet(object.maxPlayers) ? globalThis.Number(object.maxPlayers) : 0,
      smallBlind: isSet(object.smallBlind) ? globalThis.Number(object.smallBlind) : 0,
      bigBlind: isSet(object.bigBlind) ? globalThis.Number(object.bigBlind) : 0,
      timeout: isSet(object.timeout) ? globalThis.Number(object.timeout) : 0,
      gameType: isSet(object.gameType) ? globalThis.String(object.gameType) : "",
    };
  },

  toJSON(message: MsgCreateGame): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.minBuyIn !== 0) {
      obj.minBuyIn = Math.round(message.minBuyIn);
    }
    if (message.maxBuyIn !== 0) {
      obj.maxBuyIn = Math.round(message.maxBuyIn);
    }
    if (message.minPlayers !== 0) {
      obj.minPlayers = Math.round(message.minPlayers);
    }
    if (message.maxPlayers !== 0) {
      obj.maxPlayers = Math.round(message.maxPlayers);
    }
    if (message.smallBlind !== 0) {
      obj.smallBlind = Math.round(message.smallBlind);
    }
    if (message.bigBlind !== 0) {
      obj.bigBlind = Math.round(message.bigBlind);
    }
    if (message.timeout !== 0) {
      obj.timeout = Math.round(message.timeout);
    }
    if (message.gameType !== "") {
      obj.gameType = message.gameType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateGame>, I>>(base?: I): MsgCreateGame {
    return MsgCreateGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateGame>, I>>(object: I): MsgCreateGame {
    const message = createBaseMsgCreateGame();
    message.creator = object.creator ?? "";
    message.minBuyIn = object.minBuyIn ?? 0;
    message.maxBuyIn = object.maxBuyIn ?? 0;
    message.minPlayers = object.minPlayers ?? 0;
    message.maxPlayers = object.maxPlayers ?? 0;
    message.smallBlind = object.smallBlind ?? 0;
    message.bigBlind = object.bigBlind ?? 0;
    message.timeout = object.timeout ?? 0;
    message.gameType = object.gameType ?? "";
    return message;
  },
};

function createBaseMsgCreateGameResponse(): MsgCreateGameResponse {
  return {};
}

export const MsgCreateGameResponse: MessageFns<MsgCreateGameResponse> = {
  encode(_: MsgCreateGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateGameResponse {
    return {};
  },

  toJSON(_: MsgCreateGameResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateGameResponse>, I>>(base?: I): MsgCreateGameResponse {
    return MsgCreateGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateGameResponse>, I>>(_: I): MsgCreateGameResponse {
    const message = createBaseMsgCreateGameResponse();
    return message;
  },
};

function createBaseMsgJoinGame(): MsgJoinGame {
  return { creator: "", gameId: "", seat: 0, buyIn: 0 };
}

export const MsgJoinGame: MessageFns<MsgJoinGame> = {
  encode(message: MsgJoinGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    if (message.seat !== 0) {
      writer.uint32(24).uint64(message.seat);
    }
    if (message.buyIn !== 0) {
      writer.uint32(32).uint64(message.buyIn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgJoinGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgJoinGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.seat = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.buyIn = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgJoinGame {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      seat: isSet(object.seat) ? globalThis.Number(object.seat) : 0,
      buyIn: isSet(object.buyIn) ? globalThis.Number(object.buyIn) : 0,
    };
  },

  toJSON(message: MsgJoinGame): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.seat !== 0) {
      obj.seat = Math.round(message.seat);
    }
    if (message.buyIn !== 0) {
      obj.buyIn = Math.round(message.buyIn);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgJoinGame>, I>>(base?: I): MsgJoinGame {
    return MsgJoinGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgJoinGame>, I>>(object: I): MsgJoinGame {
    const message = createBaseMsgJoinGame();
    message.creator = object.creator ?? "";
    message.gameId = object.gameId ?? "";
    message.seat = object.seat ?? 0;
    message.buyIn = object.buyIn ?? 0;
    return message;
  },
};

function createBaseMsgJoinGameResponse(): MsgJoinGameResponse {
  return {};
}

export const MsgJoinGameResponse: MessageFns<MsgJoinGameResponse> = {
  encode(_: MsgJoinGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgJoinGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgJoinGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgJoinGameResponse {
    return {};
  },

  toJSON(_: MsgJoinGameResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgJoinGameResponse>, I>>(base?: I): MsgJoinGameResponse {
    return MsgJoinGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgJoinGameResponse>, I>>(_: I): MsgJoinGameResponse {
    const message = createBaseMsgJoinGameResponse();
    return message;
  },
};

function createBaseMsgLeaveGame(): MsgLeaveGame {
  return { creator: "", gameId: "" };
}

export const MsgLeaveGame: MessageFns<MsgLeaveGame> = {
  encode(message: MsgLeaveGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLeaveGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLeaveGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLeaveGame {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
    };
  },

  toJSON(message: MsgLeaveGame): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLeaveGame>, I>>(base?: I): MsgLeaveGame {
    return MsgLeaveGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLeaveGame>, I>>(object: I): MsgLeaveGame {
    const message = createBaseMsgLeaveGame();
    message.creator = object.creator ?? "";
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseMsgLeaveGameResponse(): MsgLeaveGameResponse {
  return {};
}

export const MsgLeaveGameResponse: MessageFns<MsgLeaveGameResponse> = {
  encode(_: MsgLeaveGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLeaveGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLeaveGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgLeaveGameResponse {
    return {};
  },

  toJSON(_: MsgLeaveGameResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLeaveGameResponse>, I>>(base?: I): MsgLeaveGameResponse {
    return MsgLeaveGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLeaveGameResponse>, I>>(_: I): MsgLeaveGameResponse {
    const message = createBaseMsgLeaveGameResponse();
    return message;
  },
};

function createBaseMsgDealCards(): MsgDealCards {
  return { creator: "", gameId: "" };
}

export const MsgDealCards: MessageFns<MsgDealCards> = {
  encode(message: MsgDealCards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDealCards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDealCards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDealCards {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
    };
  },

  toJSON(message: MsgDealCards): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDealCards>, I>>(base?: I): MsgDealCards {
    return MsgDealCards.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDealCards>, I>>(object: I): MsgDealCards {
    const message = createBaseMsgDealCards();
    message.creator = object.creator ?? "";
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseMsgDealCardsResponse(): MsgDealCardsResponse {
  return {};
}

export const MsgDealCardsResponse: MessageFns<MsgDealCardsResponse> = {
  encode(_: MsgDealCardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDealCardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDealCardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDealCardsResponse {
    return {};
  },

  toJSON(_: MsgDealCardsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDealCardsResponse>, I>>(base?: I): MsgDealCardsResponse {
    return MsgDealCardsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDealCardsResponse>, I>>(_: I): MsgDealCardsResponse {
    const message = createBaseMsgDealCardsResponse();
    return message;
  },
};

function createBaseMsgPerformAction(): MsgPerformAction {
  return { creator: "", gameId: "", action: "", amount: 0 };
}

export const MsgPerformAction: MessageFns<MsgPerformAction> = {
  encode(message: MsgPerformAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    if (message.action !== "") {
      writer.uint32(26).string(message.action);
    }
    if (message.amount !== 0) {
      writer.uint32(32).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgPerformAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPerformAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPerformAction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: MsgPerformAction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPerformAction>, I>>(base?: I): MsgPerformAction {
    return MsgPerformAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPerformAction>, I>>(object: I): MsgPerformAction {
    const message = createBaseMsgPerformAction();
    message.creator = object.creator ?? "";
    message.gameId = object.gameId ?? "";
    message.action = object.action ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseMsgPerformActionResponse(): MsgPerformActionResponse {
  return {};
}

export const MsgPerformActionResponse: MessageFns<MsgPerformActionResponse> = {
  encode(_: MsgPerformActionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgPerformActionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPerformActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgPerformActionResponse {
    return {};
  },

  toJSON(_: MsgPerformActionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPerformActionResponse>, I>>(base?: I): MsgPerformActionResponse {
    return MsgPerformActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPerformActionResponse>, I>>(_: I): MsgPerformActionResponse {
    const message = createBaseMsgPerformActionResponse();
    return message;
  },
};

function createBaseMsgMint(): MsgMint {
  return { creator: "", recipient: "", amount: 0, ethTxHash: "", nonce: 0 };
}

export const MsgMint: MessageFns<MsgMint> = {
  encode(message: MsgMint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.recipient !== "") {
      writer.uint32(18).string(message.recipient);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    if (message.ethTxHash !== "") {
      writer.uint32(34).string(message.ethTxHash);
    }
    if (message.nonce !== 0) {
      writer.uint32(40).uint64(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ethTxHash = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.nonce = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgMint {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      ethTxHash: isSet(object.ethTxHash) ? globalThis.String(object.ethTxHash) : "",
      nonce: isSet(object.nonce) ? globalThis.Number(object.nonce) : 0,
    };
  },

  toJSON(message: MsgMint): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.ethTxHash !== "") {
      obj.ethTxHash = message.ethTxHash;
    }
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMint>, I>>(base?: I): MsgMint {
    return MsgMint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMint>, I>>(object: I): MsgMint {
    const message = createBaseMsgMint();
    message.creator = object.creator ?? "";
    message.recipient = object.recipient ?? "";
    message.amount = object.amount ?? 0;
    message.ethTxHash = object.ethTxHash ?? "";
    message.nonce = object.nonce ?? 0;
    return message;
  },
};

function createBaseMsgMintResponse(): MsgMintResponse {
  return {};
}

export const MsgMintResponse: MessageFns<MsgMintResponse> = {
  encode(_: MsgMintResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMintResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMintResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgMintResponse {
    return {};
  },

  toJSON(_: MsgMintResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMintResponse>, I>>(base?: I): MsgMintResponse {
    return MsgMintResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMintResponse>, I>>(_: I): MsgMintResponse {
    const message = createBaseMsgMintResponse();
    return message;
  },
};

function createBaseMsgBurn(): MsgBurn {
  return { creator: "", amount: 0, ethRecipient: "" };
}

export const MsgBurn: MessageFns<MsgBurn> = {
  encode(message: MsgBurn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.amount !== 0) {
      writer.uint32(16).uint64(message.amount);
    }
    if (message.ethRecipient !== "") {
      writer.uint32(26).string(message.ethRecipient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBurn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ethRecipient = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBurn {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      ethRecipient: isSet(object.ethRecipient) ? globalThis.String(object.ethRecipient) : "",
    };
  },

  toJSON(message: MsgBurn): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.ethRecipient !== "") {
      obj.ethRecipient = message.ethRecipient;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurn>, I>>(base?: I): MsgBurn {
    return MsgBurn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurn>, I>>(object: I): MsgBurn {
    const message = createBaseMsgBurn();
    message.creator = object.creator ?? "";
    message.amount = object.amount ?? 0;
    message.ethRecipient = object.ethRecipient ?? "";
    return message;
  },
};

function createBaseMsgBurnResponse(): MsgBurnResponse {
  return {};
}

export const MsgBurnResponse: MessageFns<MsgBurnResponse> = {
  encode(_: MsgBurnResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBurnResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBurnResponse {
    return {};
  },

  toJSON(_: MsgBurnResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurnResponse>, I>>(base?: I): MsgBurnResponse {
    return MsgBurnResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurnResponse>, I>>(_: I): MsgBurnResponse {
    const message = createBaseMsgBurnResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** CreateGame defines the CreateGame RPC. */
  CreateGame(request: MsgCreateGame): Promise<MsgCreateGameResponse>;
  /** JoinGame defines the JoinGame RPC. */
  JoinGame(request: MsgJoinGame): Promise<MsgJoinGameResponse>;
  /** LeaveGame defines the LeaveGame RPC. */
  LeaveGame(request: MsgLeaveGame): Promise<MsgLeaveGameResponse>;
  /** DealCards defines the DealCards RPC. */
  DealCards(request: MsgDealCards): Promise<MsgDealCardsResponse>;
  /** PerformAction defines the PerformAction RPC. */
  PerformAction(request: MsgPerformAction): Promise<MsgPerformActionResponse>;
  /** Mint defines the Mint RPC. */
  Mint(request: MsgMint): Promise<MsgMintResponse>;
  /** Burn defines the Burn RPC. */
  Burn(request: MsgBurn): Promise<MsgBurnResponse>;
}

export const MsgServiceName = "pokerchain.poker.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateGame = this.CreateGame.bind(this);
    this.JoinGame = this.JoinGame.bind(this);
    this.LeaveGame = this.LeaveGame.bind(this);
    this.DealCards = this.DealCards.bind(this);
    this.PerformAction = this.PerformAction.bind(this);
    this.Mint = this.Mint.bind(this);
    this.Burn = this.Burn.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateGame(request: MsgCreateGame): Promise<MsgCreateGameResponse> {
    const data = MsgCreateGame.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateGame", data);
    return promise.then((data) => MsgCreateGameResponse.decode(new BinaryReader(data)));
  }

  JoinGame(request: MsgJoinGame): Promise<MsgJoinGameResponse> {
    const data = MsgJoinGame.encode(request).finish();
    const promise = this.rpc.request(this.service, "JoinGame", data);
    return promise.then((data) => MsgJoinGameResponse.decode(new BinaryReader(data)));
  }

  LeaveGame(request: MsgLeaveGame): Promise<MsgLeaveGameResponse> {
    const data = MsgLeaveGame.encode(request).finish();
    const promise = this.rpc.request(this.service, "LeaveGame", data);
    return promise.then((data) => MsgLeaveGameResponse.decode(new BinaryReader(data)));
  }

  DealCards(request: MsgDealCards): Promise<MsgDealCardsResponse> {
    const data = MsgDealCards.encode(request).finish();
    const promise = this.rpc.request(this.service, "DealCards", data);
    return promise.then((data) => MsgDealCardsResponse.decode(new BinaryReader(data)));
  }

  PerformAction(request: MsgPerformAction): Promise<MsgPerformActionResponse> {
    const data = MsgPerformAction.encode(request).finish();
    const promise = this.rpc.request(this.service, "PerformAction", data);
    return promise.then((data) => MsgPerformActionResponse.decode(new BinaryReader(data)));
  }

  Mint(request: MsgMint): Promise<MsgMintResponse> {
    const data = MsgMint.encode(request).finish();
    const promise = this.rpc.request(this.service, "Mint", data);
    return promise.then((data) => MsgMintResponse.decode(new BinaryReader(data)));
  }

  Burn(request: MsgBurn): Promise<MsgBurnResponse> {
    const data = MsgBurn.encode(request).finish();
    const promise = this.rpc.request(this.service, "Burn", data);
    return promise.then((data) => MsgBurnResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
