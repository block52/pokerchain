// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: pokerchain/poker/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Params } from "./params";

export const protobufPackage = "pokerchain.poker.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

/** QueryGameRequest defines the QueryGameRequest message. */
export interface QueryGameRequest {
  gameId: string;
}

/** QueryGameResponse defines the QueryGameResponse message. */
export interface QueryGameResponse {
  game: string;
}

/** QueryListGamesRequest defines the QueryListGamesRequest message. */
export interface QueryListGamesRequest {
}

/** QueryListGamesResponse defines the QueryListGamesResponse message. */
export interface QueryListGamesResponse {
  games: string;
}

/** QueryPlayerGamesRequest defines the QueryPlayerGamesRequest message. */
export interface QueryPlayerGamesRequest {
  playerAddress: string;
}

/** QueryPlayerGamesResponse defines the QueryPlayerGamesResponse message. */
export interface QueryPlayerGamesResponse {
  games: string;
}

/** QueryLegalActionsRequest defines the QueryLegalActionsRequest message. */
export interface QueryLegalActionsRequest {
  gameId: string;
  playerAddress: string;
}

/** QueryLegalActionsResponse defines the QueryLegalActionsResponse message. */
export interface QueryLegalActionsResponse {
  actions: string;
}

/** QueryGameStateRequest defines the QueryGameStateRequest message. */
export interface QueryGameStateRequest {
  gameId: string;
}

/** QueryGameStateResponse defines the QueryGameStateResponse message. */
export interface QueryGameStateResponse {
  gameState: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGameRequest(): QueryGameRequest {
  return { gameId: "" };
}

export const QueryGameRequest: MessageFns<QueryGameRequest> = {
  encode(message: QueryGameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGameRequest {
    return { gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "" };
  },

  toJSON(message: QueryGameRequest): unknown {
    const obj: any = {};
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGameRequest>, I>>(base?: I): QueryGameRequest {
    return QueryGameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGameRequest>, I>>(object: I): QueryGameRequest {
    const message = createBaseQueryGameRequest();
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseQueryGameResponse(): QueryGameResponse {
  return { game: "" };
}

export const QueryGameResponse: MessageFns<QueryGameResponse> = {
  encode(message: QueryGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.game !== "") {
      writer.uint32(10).string(message.game);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.game = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGameResponse {
    return { game: isSet(object.game) ? globalThis.String(object.game) : "" };
  },

  toJSON(message: QueryGameResponse): unknown {
    const obj: any = {};
    if (message.game !== "") {
      obj.game = message.game;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGameResponse>, I>>(base?: I): QueryGameResponse {
    return QueryGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGameResponse>, I>>(object: I): QueryGameResponse {
    const message = createBaseQueryGameResponse();
    message.game = object.game ?? "";
    return message;
  },
};

function createBaseQueryListGamesRequest(): QueryListGamesRequest {
  return {};
}

export const QueryListGamesRequest: MessageFns<QueryListGamesRequest> = {
  encode(_: QueryListGamesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListGamesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListGamesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryListGamesRequest {
    return {};
  },

  toJSON(_: QueryListGamesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListGamesRequest>, I>>(base?: I): QueryListGamesRequest {
    return QueryListGamesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListGamesRequest>, I>>(_: I): QueryListGamesRequest {
    const message = createBaseQueryListGamesRequest();
    return message;
  },
};

function createBaseQueryListGamesResponse(): QueryListGamesResponse {
  return { games: "" };
}

export const QueryListGamesResponse: MessageFns<QueryListGamesResponse> = {
  encode(message: QueryListGamesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.games !== "") {
      writer.uint32(10).string(message.games);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListGamesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.games = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListGamesResponse {
    return { games: isSet(object.games) ? globalThis.String(object.games) : "" };
  },

  toJSON(message: QueryListGamesResponse): unknown {
    const obj: any = {};
    if (message.games !== "") {
      obj.games = message.games;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListGamesResponse>, I>>(base?: I): QueryListGamesResponse {
    return QueryListGamesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListGamesResponse>, I>>(object: I): QueryListGamesResponse {
    const message = createBaseQueryListGamesResponse();
    message.games = object.games ?? "";
    return message;
  },
};

function createBaseQueryPlayerGamesRequest(): QueryPlayerGamesRequest {
  return { playerAddress: "" };
}

export const QueryPlayerGamesRequest: MessageFns<QueryPlayerGamesRequest> = {
  encode(message: QueryPlayerGamesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerAddress !== "") {
      writer.uint32(10).string(message.playerAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPlayerGamesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlayerGamesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlayerGamesRequest {
    return { playerAddress: isSet(object.playerAddress) ? globalThis.String(object.playerAddress) : "" };
  },

  toJSON(message: QueryPlayerGamesRequest): unknown {
    const obj: any = {};
    if (message.playerAddress !== "") {
      obj.playerAddress = message.playerAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlayerGamesRequest>, I>>(base?: I): QueryPlayerGamesRequest {
    return QueryPlayerGamesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlayerGamesRequest>, I>>(object: I): QueryPlayerGamesRequest {
    const message = createBaseQueryPlayerGamesRequest();
    message.playerAddress = object.playerAddress ?? "";
    return message;
  },
};

function createBaseQueryPlayerGamesResponse(): QueryPlayerGamesResponse {
  return { games: "" };
}

export const QueryPlayerGamesResponse: MessageFns<QueryPlayerGamesResponse> = {
  encode(message: QueryPlayerGamesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.games !== "") {
      writer.uint32(10).string(message.games);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPlayerGamesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlayerGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.games = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlayerGamesResponse {
    return { games: isSet(object.games) ? globalThis.String(object.games) : "" };
  },

  toJSON(message: QueryPlayerGamesResponse): unknown {
    const obj: any = {};
    if (message.games !== "") {
      obj.games = message.games;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlayerGamesResponse>, I>>(base?: I): QueryPlayerGamesResponse {
    return QueryPlayerGamesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlayerGamesResponse>, I>>(object: I): QueryPlayerGamesResponse {
    const message = createBaseQueryPlayerGamesResponse();
    message.games = object.games ?? "";
    return message;
  },
};

function createBaseQueryLegalActionsRequest(): QueryLegalActionsRequest {
  return { gameId: "", playerAddress: "" };
}

export const QueryLegalActionsRequest: MessageFns<QueryLegalActionsRequest> = {
  encode(message: QueryLegalActionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    if (message.playerAddress !== "") {
      writer.uint32(18).string(message.playerAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLegalActionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLegalActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLegalActionsRequest {
    return {
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      playerAddress: isSet(object.playerAddress) ? globalThis.String(object.playerAddress) : "",
    };
  },

  toJSON(message: QueryLegalActionsRequest): unknown {
    const obj: any = {};
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.playerAddress !== "") {
      obj.playerAddress = message.playerAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLegalActionsRequest>, I>>(base?: I): QueryLegalActionsRequest {
    return QueryLegalActionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLegalActionsRequest>, I>>(object: I): QueryLegalActionsRequest {
    const message = createBaseQueryLegalActionsRequest();
    message.gameId = object.gameId ?? "";
    message.playerAddress = object.playerAddress ?? "";
    return message;
  },
};

function createBaseQueryLegalActionsResponse(): QueryLegalActionsResponse {
  return { actions: "" };
}

export const QueryLegalActionsResponse: MessageFns<QueryLegalActionsResponse> = {
  encode(message: QueryLegalActionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actions !== "") {
      writer.uint32(10).string(message.actions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLegalActionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLegalActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLegalActionsResponse {
    return { actions: isSet(object.actions) ? globalThis.String(object.actions) : "" };
  },

  toJSON(message: QueryLegalActionsResponse): unknown {
    const obj: any = {};
    if (message.actions !== "") {
      obj.actions = message.actions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLegalActionsResponse>, I>>(base?: I): QueryLegalActionsResponse {
    return QueryLegalActionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLegalActionsResponse>, I>>(object: I): QueryLegalActionsResponse {
    const message = createBaseQueryLegalActionsResponse();
    message.actions = object.actions ?? "";
    return message;
  },
};

function createBaseQueryGameStateRequest(): QueryGameStateRequest {
  return { gameId: "" };
}

export const QueryGameStateRequest: MessageFns<QueryGameStateRequest> = {
  encode(message: QueryGameStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGameStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGameStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGameStateRequest {
    return { gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "" };
  },

  toJSON(message: QueryGameStateRequest): unknown {
    const obj: any = {};
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGameStateRequest>, I>>(base?: I): QueryGameStateRequest {
    return QueryGameStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGameStateRequest>, I>>(object: I): QueryGameStateRequest {
    const message = createBaseQueryGameStateRequest();
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseQueryGameStateResponse(): QueryGameStateResponse {
  return { gameState: "" };
}

export const QueryGameStateResponse: MessageFns<QueryGameStateResponse> = {
  encode(message: QueryGameStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameState !== "") {
      writer.uint32(10).string(message.gameState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGameStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGameStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameState = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGameStateResponse {
    return { gameState: isSet(object.gameState) ? globalThis.String(object.gameState) : "" };
  },

  toJSON(message: QueryGameStateResponse): unknown {
    const obj: any = {};
    if (message.gameState !== "") {
      obj.gameState = message.gameState;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGameStateResponse>, I>>(base?: I): QueryGameStateResponse {
    return QueryGameStateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGameStateResponse>, I>>(object: I): QueryGameStateResponse {
    const message = createBaseQueryGameStateResponse();
    message.gameState = object.gameState ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Game Queries a list of Game items. */
  Game(request: QueryGameRequest): Promise<QueryGameResponse>;
  /** ListGames Queries a list of ListGames items. */
  ListGames(request: QueryListGamesRequest): Promise<QueryListGamesResponse>;
  /** PlayerGames Queries a list of PlayerGames items. */
  PlayerGames(request: QueryPlayerGamesRequest): Promise<QueryPlayerGamesResponse>;
  /** LegalActions Queries a list of LegalActions items. */
  LegalActions(request: QueryLegalActionsRequest): Promise<QueryLegalActionsResponse>;
  /** GameState Queries the detailed game state for a game. */
  GameState(request: QueryGameStateRequest): Promise<QueryGameStateResponse>;
}

export const QueryServiceName = "pokerchain.poker.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Game = this.Game.bind(this);
    this.ListGames = this.ListGames.bind(this);
    this.PlayerGames = this.PlayerGames.bind(this);
    this.LegalActions = this.LegalActions.bind(this);
    this.GameState = this.GameState.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Game(request: QueryGameRequest): Promise<QueryGameResponse> {
    const data = QueryGameRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Game", data);
    return promise.then((data) => QueryGameResponse.decode(new BinaryReader(data)));
  }

  ListGames(request: QueryListGamesRequest): Promise<QueryListGamesResponse> {
    const data = QueryListGamesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListGames", data);
    return promise.then((data) => QueryListGamesResponse.decode(new BinaryReader(data)));
  }

  PlayerGames(request: QueryPlayerGamesRequest): Promise<QueryPlayerGamesResponse> {
    const data = QueryPlayerGamesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlayerGames", data);
    return promise.then((data) => QueryPlayerGamesResponse.decode(new BinaryReader(data)));
  }

  LegalActions(request: QueryLegalActionsRequest): Promise<QueryLegalActionsResponse> {
    const data = QueryLegalActionsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LegalActions", data);
    return promise.then((data) => QueryLegalActionsResponse.decode(new BinaryReader(data)));
  }

  GameState(request: QueryGameStateRequest): Promise<QueryGameStateResponse> {
    const data = QueryGameStateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GameState", data);
    return promise.then((data) => QueryGameStateResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
