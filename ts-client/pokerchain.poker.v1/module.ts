// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateParams } from "./types/pokerchain/poker/v1/tx";
import { MsgCreateGame } from "./types/pokerchain/poker/v1/tx";
import { MsgJoinGame } from "./types/pokerchain/poker/v1/tx";
import { MsgLeaveGame } from "./types/pokerchain/poker/v1/tx";
import { MsgDealCards } from "./types/pokerchain/poker/v1/tx";
import { MsgPerformAction } from "./types/pokerchain/poker/v1/tx";
import { MsgMint } from "./types/pokerchain/poker/v1/tx";
import { MsgBurn } from "./types/pokerchain/poker/v1/tx";

import { Params as typeParams} from "./types"

export { MsgUpdateParams, MsgCreateGame, MsgJoinGame, MsgLeaveGame, MsgDealCards, MsgPerformAction, MsgMint, MsgBurn };

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateGameParams = {
  value: MsgCreateGame,
  fee?: StdFee,
  memo?: string
};

type sendMsgJoinGameParams = {
  value: MsgJoinGame,
  fee?: StdFee,
  memo?: string
};

type sendMsgLeaveGameParams = {
  value: MsgLeaveGame,
  fee?: StdFee,
  memo?: string
};

type sendMsgDealCardsParams = {
  value: MsgDealCards,
  fee?: StdFee,
  memo?: string
};

type sendMsgPerformActionParams = {
  value: MsgPerformAction,
  fee?: StdFee,
  memo?: string
};

type sendMsgMintParams = {
  value: MsgMint,
  fee?: StdFee,
  memo?: string
};

type sendMsgBurnParams = {
  value: MsgBurn,
  fee?: StdFee,
  memo?: string
};


type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgCreateGameParams = {
  value: MsgCreateGame,
};

type msgJoinGameParams = {
  value: MsgJoinGame,
};

type msgLeaveGameParams = {
  value: MsgLeaveGame,
};

type msgDealCardsParams = {
  value: MsgDealCards,
};

type msgPerformActionParams = {
  value: MsgPerformAction,
};

type msgMintParams = {
  value: MsgMint,
};

type msgBurnParams = {
  value: MsgBurn,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateGame({ value, fee, memo }: sendMsgCreateGameParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateGame: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateGame({ value: MsgCreateGame.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateGame: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgJoinGame({ value, fee, memo }: sendMsgJoinGameParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgJoinGame: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgJoinGame({ value: MsgJoinGame.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgJoinGame: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgLeaveGame({ value, fee, memo }: sendMsgLeaveGameParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgLeaveGame: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgLeaveGame({ value: MsgLeaveGame.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgLeaveGame: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDealCards({ value, fee, memo }: sendMsgDealCardsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDealCards: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDealCards({ value: MsgDealCards.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDealCards: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgPerformAction({ value, fee, memo }: sendMsgPerformActionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgPerformAction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgPerformAction({ value: MsgPerformAction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgPerformAction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgMint({ value, fee, memo }: sendMsgMintParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgMint: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgMint({ value: MsgMint.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgMint: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBurn({ value, fee, memo }: sendMsgBurnParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBurn: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgBurn({ value: MsgBurn.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBurn: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/pokerchain.poker.v1.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgCreateGame({ value }: msgCreateGameParams): EncodeObject {
			try {
				return { typeUrl: "/pokerchain.poker.v1.MsgCreateGame", value: MsgCreateGame.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateGame: Could not create message: ' + e.message)
			}
		},
		
		msgJoinGame({ value }: msgJoinGameParams): EncodeObject {
			try {
				return { typeUrl: "/pokerchain.poker.v1.MsgJoinGame", value: MsgJoinGame.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgJoinGame: Could not create message: ' + e.message)
			}
		},
		
		msgLeaveGame({ value }: msgLeaveGameParams): EncodeObject {
			try {
				return { typeUrl: "/pokerchain.poker.v1.MsgLeaveGame", value: MsgLeaveGame.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgLeaveGame: Could not create message: ' + e.message)
			}
		},
		
		msgDealCards({ value }: msgDealCardsParams): EncodeObject {
			try {
				return { typeUrl: "/pokerchain.poker.v1.MsgDealCards", value: MsgDealCards.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDealCards: Could not create message: ' + e.message)
			}
		},
		
		msgPerformAction({ value }: msgPerformActionParams): EncodeObject {
			try {
				return { typeUrl: "/pokerchain.poker.v1.MsgPerformAction", value: MsgPerformAction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgPerformAction: Could not create message: ' + e.message)
			}
		},
		
		msgMint({ value }: msgMintParams): EncodeObject {
			try {
				return { typeUrl: "/pokerchain.poker.v1.MsgMint", value: MsgMint.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgMint: Could not create message: ' + e.message)
			}
		},
		
		msgBurn({ value }: msgBurnParams): EncodeObject {
			try {
				return { typeUrl: "/pokerchain.poker.v1.MsgBurn", value: MsgBurn.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBurn: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			PokerchainPokerV_1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;